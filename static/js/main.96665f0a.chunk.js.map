{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PLACES","name","zip","WeatherDisplay","state","weatherData","this","props","fetch","then","res","json","setState","catch","err","console","log","weather","iconUrl","icon","main","src","alt","description","temp","temp_max","temp_min","wind","speed","React","Component","App","activePlace","className","map","place","index","key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4NAGMA,G,MAAS,CACb,CAAEC,KAAM,YAAaC,IAAK,SAC1B,CAAED,KAAM,WAAYC,IAAK,SACzB,CAAED,KAAM,aAAcC,IAAK,SAC3B,CAAED,KAAM,SAAUC,IAAK,YAEnBC,E,kDACJ,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,YAAa,MAHH,E,gEAMO,IAAD,OACZH,EAAMI,KAAKC,MAAML,IAKvBM,MAHE,oDACAN,EACA,0DAECO,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GACL,EAAKC,SAAS,CAAEP,YAAaM,OAE9BE,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,Q,+BAG9B,IAAMT,EAAcC,KAAKF,MAAMC,YAC/B,IAAKA,EAAa,OAAO,wCACzB,IAAMY,EAAUZ,EAAYY,QAAQ,GAC9BC,EAAU,mCAAqCD,EAAQE,KAAO,OACpE,OACE,6BACE,4BACGF,EAAQG,KADX,OACqBf,EAAYJ,KAC/B,yBAAKoB,IAAKH,EAASI,IAAKjB,EAAYkB,eAEtC,uCAAalB,EAAYe,KAAKI,KAA9B,QACA,oCAAUnB,EAAYe,KAAKK,SAA3B,QACA,mCAASpB,EAAYe,KAAKM,SAA1B,QACA,0CAAgBrB,EAAYsB,KAAKC,MAAjC,e,GAlCqBC,IAAMC,WAoEpBC,E,kDA3Bb,aAAe,IAAD,8BACZ,gBACK3B,MAAQ,CACX4B,YAAa,GAHH,E,qDAOJ,IAAD,OACDA,EAAc1B,KAAKF,MAAM4B,YAC/B,OACE,yBAAKC,UAAU,OACZjC,EAAOkC,KAAI,SAACC,EAAOC,GAAR,OACV,4BACEC,IAAKD,EACLE,QAAS,WACP,EAAK1B,SAAS,CAAEoB,YAAaI,MAG9BD,EAAMlC,SAGX,kBAAC,EAAD,CAAgBoC,IAAKL,EAAa9B,IAAKF,EAAOgC,GAAa9B,W,GAtBjD2B,IAAMC,WCrCJS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdxC,OAAM,SAAAyC,GACLvC,QAAQuC,MAAMA,EAAMC,a","file":"static/js/main.96665f0a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nconst PLACES = [\n  { name: \"Barcelona\", zip: \"08001\" },\n  { name: \"San Jose\", zip: \"94088\" },\n  { name: \"Santa Cruz\", zip: \"95062\" },\n  { name: \"Moscow\", zip: \"101000\" },\n];\nclass WeatherDisplay extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      weatherData: null,\n    };\n  }\n  componentDidMount() {\n    const zip = this.props.zip;\n    const URL =\n      \"http://api.openweathermap.org/data/2.5/weather?q=\" +\n      zip +\n      \"&appid=b1b35bba8b434a28a0be2a3e1071ae5b&units=imperial\";\n    fetch(URL)\n      .then((res) => res.json())\n      .then((json) => {\n        this.setState({ weatherData: json });\n      })\n      .catch((err) => console.log(err));\n  }\n  render() {\n    const weatherData = this.state.weatherData;\n    if (!weatherData) return <div>Loading</div>;\n    const weather = weatherData.weather[0];\n    const iconUrl = \"http://openweathermap.org/img/w/\" + weather.icon + \".png\";\n    return (\n      <div>\n        <h1>\n          {weather.main} in {weatherData.name}\n          <img src={iconUrl} alt={weatherData.description} />\n        </h1>\n        <p>Current: {weatherData.main.temp}°</p>\n        <p>High: {weatherData.main.temp_max}°</p>\n        <p>Low: {weatherData.main.temp_min}°</p>\n        <p>Wind Speed: {weatherData.wind.speed} mi/hr</p>\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      activePlace: 0,\n    };\n  }\n\n  render() {\n    const activePlace = this.state.activePlace;\n    return (\n      <div className=\"App\">\n        {PLACES.map((place, index) => (\n          <button\n            key={index}\n            onClick={() => {\n              this.setState({ activePlace: index });\n            }}\n          >\n            {place.name}\n          </button>\n        ))}\n        <WeatherDisplay key={activePlace} zip={PLACES[activePlace].zip} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}